#pragma once
#ifdef WIN32
#include <Engine/pch.h>
#include <Engine/render/PC/D3dRenderer.h>

enum class ResourceState : uint32_t
{
    COMMON = D3D12_RESOURCE_STATE_COMMON,
    VERTEX_AND_CONSTANT_BUFFER = D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER,
    INDEX_BUFFER = D3D12_RESOURCE_STATE_INDEX_BUFFER,
    RENDER_TARGET = D3D12_RESOURCE_STATE_RENDER_TARGET,
    UNORDERED_ACCESS = D3D12_RESOURCE_STATE_UNORDERED_ACCESS,
    DEPTH_WRITE = D3D12_RESOURCE_STATE_DEPTH_WRITE,
    DEPTH_READ = D3D12_RESOURCE_STATE_DEPTH_READ,
    NON_PIXEL_SHADER_RESOURCE = D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE,
    PIXEL_SHADER_RESOURCE = D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE,
    STREAM_OUT = D3D12_RESOURCE_STATE_STREAM_OUT,
    INDIRECT_ARGUMENT = D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT,
    COPY_DEST = D3D12_RESOURCE_STATE_COPY_DEST,
    COPY_SOURCE = D3D12_RESOURCE_STATE_COPY_SOURCE,
    RESOLVE_DEST = D3D12_RESOURCE_STATE_RESOLVE_DEST,
    RESOLVE_SOURCE = D3D12_RESOURCE_STATE_RESOLVE_SOURCE,
    READ = D3D12_RESOURCE_STATE_GENERIC_READ,
    PRESENT = D3D12_RESOURCE_STATE_PRESENT,
    PREDICATION = D3D12_RESOURCE_STATE_PREDICATION,
    VIDEO_DECODE_READ = D3D12_RESOURCE_STATE_VIDEO_DECODE_READ,
    VIDEO_DECODE_WRITE = D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE,
    VIDEO_PROCESS_READ = D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ,
    VIDEO_PROCESS_WRITE = D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE,
    VIDEO_ENCODE_READ = D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ,
    VIDEO_ENCODE_WRITE = D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE,
    UNKNOWN = 0xffffffff,
};

struct D3dResource
{
    friend D3dResource gCreateD3dResource(ID3D12Device* pDevice,
        D3D12_HEAP_FLAGS heapFlags,
        const D3D12_HEAP_PROPERTIES& heapProp,
        const D3D12_RESOURCE_DESC& desc,
        D3D12_RESOURCE_STATES initialState);
    friend class D3dRenderer;
    
public:
    ID3D12Resource* NativePtr() const;
    uint64_t SubResourceCount() const;
    ResourceState* ResourceStates() const;

    GUID GetGuid() const;
    virtual void release();
    virtual ~D3dResource();

    DELETE_COPY_CONSTRUCTOR(D3dResource)
    DELETE_COPY_OPERATOR(D3dResource)
    DEFAULT_MOVE_CONSTRUCTOR(D3dResource)
    DEFAULT_MOVE_OPERATOR(D3dResource)

private:
    D3dResource(ID3D12Resource* pResource,
        uint64_t subResourceCount,
        ResourceState* resourceStates);
    ComPtr<ID3D12Resource> mResource;
    uint64_t mSubResourceCount;
    ResourceState* mResourceStates;
};

D3dResource gCreateD3dResource(ID3D12Device* pDevice,
    D3D12_HEAP_FLAGS heapFlags,
    const D3D12_HEAP_PROPERTIES& heapProp,
    const D3D12_RESOURCE_DESC& desc,
    D3D12_RESOURCE_STATES initialState);
#endif